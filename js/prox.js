/**
 * @fileoverview M√≥dulo de Gerenciamento de Tarefas da Pr√≥xima Semana
 * 
 * Este m√≥dulo √© respons√°vel pelo gerenciamento completo das tarefas programadas para a pr√≥xima semana,
 * incluindo cria√ß√£o, visualiza√ß√£o, altera√ß√£o de status e persist√™ncia de dados.
 * 
 * @author Gabrielle de Araujo Oliveira, Daniel Augusto Suman De Carvalho 
 * @version 1.0.0
 * @since 2025
 * 
 * @description Funcionalidades principais:
 * 
 * **CATEGORIAS DE FUNCIONALIDADES:**
 * 
 *  **GERENCIAMENTO DE DADOS**
 * - Carregamento de tarefas do localStorage
 * - Persist√™ncia autom√°tica de altera√ß√µes
 * - Sincroniza√ß√£o de dados entre sess√µes
 * - Estrutura de dados com ID √∫nico, t√≠tulo, descri√ß√£o, prazo e status
 * 
 *   **INTERFACE E VISUALIZA√á√ÉO**
 * - Renderiza√ß√£o din√¢mica de listas de tarefas (pendentes/conclu√≠das)
 * - Mensagens de estado para listas vazias
 * - Anima√ß√µes de transi√ß√£o entre estados
 * - Feedback visual para a√ß√µes do usu√°rio
 * 
 *  **INTERATIVIDADE**
 * - Sistema de checkbox para altera√ß√£o de status
 * - Modal para cria√ß√£o de novas tarefas
 * - Eventos de formul√°rio com valida√ß√£o
 * - Controles de abertura/fechamento de modal
 * 
 *  **MOVIMENTA√á√ÉO DE TAREFAS**
 * - Transi√ß√£o animada entre listas (pendentes ‚Üî conclu√≠das)
 * - Atualiza√ß√£o autom√°tica de status no localStorage
 * - Verifica√ß√£o e atualiza√ß√£o de estados das se√ß√µes
 * 
 *   **CRIA√á√ÉO DE TAREFAS**
 * - Formul√°rio completo com t√≠tulo, descri√ß√£o, prazo e prioridade
 * - Gera√ß√£o autom√°tica de IDs √∫nicos
 * - Integra√ß√£o com sistema de armazenamento local
 * 
 * **ELEMENTOS DOM PRINCIPAIS:**
 * - #lista-tarefas-prox: Container de tarefas pendentes
 * - #lista-tarefas-concluidas-prox: Container de tarefas conclu√≠das
 * - #modalNovaTarefaProx: Modal de cria√ß√£o de tarefas
 * - #formNovaTarefaProx: Formul√°rio de nova tarefa
 * 
 */

// INICIALIZA√á√ÉO DA APLICA√á√ÉO - Aguarda carregamento completo do DOM antes de executar
document.addEventListener('DOMContentLoaded', function() { // EVENTO DE CARREGAMENTO - Garante que HTML esteja totalmente carregado

    // SELE√á√ÉO DE ELEMENTOS DOM - Localiza containers principais da interface
    const listaTarefasProx = document.getElementById('lista-tarefas-prox'); // CONTAINER DE PENDENTES - Lista de tarefas da pr√≥xima semana
    const listaTarefasConcluidas = document.getElementById('lista-tarefas-concluidas-prox'); // CONTAINER DE CONCLU√çDAS - Lista de tarefas finalizadas

    // CARREGAMENTO INICIAL - Executa fun√ß√£o que recupera e exibe tarefas salvas
    carregarTarefas(); // INICIALIZA√á√ÉO DE DADOS - Carrega tarefas do localStorage
    
    // FUN√á√ÉO DE CARREGAMENTO DE DADOS - Recupera e exibe tarefas salvas no armazenamento
    function carregarTarefas() {
        // RECUPERA√á√ÉO DE DADOS PERSISTIDOS - Obt√©m tarefas do localStorage ou cria lista vazia
        const tarefasProx = JSON.parse(localStorage.getItem('tarefasProx')) || []; // ACESSO AO STORAGE - Busca dados salvos ou inicializa array vazio
        
        // LIMPEZA DA INTERFACE - Remove conte√∫do anterior das listas
        listaTarefasProx.innerHTML = ''; // RESET DE PENDENTES - Limpa lista de tarefas pendentes
        listaTarefasConcluidas.innerHTML = ''; // RESET DE CONCLU√çDAS - Limpa lista de tarefas conclu√≠das
        
        // VERIFICA√á√ÉO DE LISTA VAZIA - Exibe mensagens quando n√£o h√° tarefas salvas
        if (tarefasProx.length === 0) { // TESTE DE QUANTIDADE - Verifica se n√£o existem tarefas
            listaTarefasProx.innerHTML = '<div class="sem-tarefas">Nenhuma tarefa para a pr√≥xima semana. Crie uma nova tarefa!</div>'; // MENSAGEM DE ESTADO VAZIO - Orienta cria√ß√£o de nova tarefa
            listaTarefasConcluidas.innerHTML = '<div class="sem-tarefas">Nenhuma tarefa conclu√≠da ainda.</div>'; // MENSAGEM DE CONCLU√çDAS VAZIAS - Informa aus√™ncia de tarefas finalizadas
        } else {
            // SEPARA√á√ÉO POR STATUS - Divide tarefas entre pendentes e conclu√≠das
            const tarefasPendentes = tarefasProx.filter(t => !t.concluida); // FILTRO DE PENDENTES - Seleciona tarefas n√£o conclu√≠das
            const tarefasConcluidas = tarefasProx.filter(t => t.concluida); // FILTRO DE CONCLU√çDAS - Seleciona tarefas finalizadas
            
            // VERIFICA√á√ÉO DE PENDENTES VAZIAS - Exibe mensagem quando todas est√£o conclu√≠das
            if (tarefasPendentes.length === 0) { // TESTE DE PENDENTES - Verifica se n√£o h√° tarefas pendentes
                listaTarefasProx.innerHTML = '<div class="sem-tarefas">Todas as tarefas foram conclu√≠das! üéâ</div>'; // MENSAGEM DE SUCESSO - Parabeniza conclus√£o de todas as tarefas
            }
            
            // VERIFICA√á√ÉO DE CONCLU√çDAS VAZIAS - Exibe mensagem quando n√£o h√° tarefas finalizadas
            if (tarefasConcluidas.length === 0) { // TESTE DE CONCLU√çDAS - Verifica se n√£o h√° tarefas conclu√≠das
                listaTarefasConcluidas.innerHTML = '<div class="sem-tarefas">Nenhuma tarefa conclu√≠da ainda.</div>'; // MENSAGEM DE ESTADO VAZIO - Informa aus√™ncia de conclus√µes
            }
            
            // RENDERIZA√á√ÉO VISUAL - Cria elementos HTML para cada tarefa
            tarefasProx.forEach(tarefa => { // ITERA√á√ÉO - Processa cada tarefa individualmente
                criarElementoTarefa(tarefa); // CRIA√á√ÉO DE ELEMENTO - Gera HTML da tarefa na interface
            });
        }
        
        // REATIVA√á√ÉO DE EVENTOS - Configura novamente os listeners dos checkboxes
        adicionarEventListeners(); // CONFIGURA√á√ÉO DE INTERATIVIDADE - Habilita controles de checkbox
    }
    
    // FUN√á√ÉO DE CRIA√á√ÉO DE ELEMENTO - Gera estrutura HTML visual para uma tarefa
    function criarElementoTarefa(tarefa) {
        // CRIA√á√ÉO DO CONTAINER - Cria elemento div que conter√° toda a tarefa
        const tarefaElement = document.createElement('div'); // ELEMENTO BASE - Container principal da tarefa
        tarefaElement.className = `tarefa-item ${tarefa.concluida ? 'tarefa-concluida' : ''}`; // APLICA√á√ÉO DE CLASSES - Define apar√™ncia baseada no status
        tarefaElement.dataset.id = tarefa.id; // ARMAZENAMENTO DE ID - Salva identificador no atributo data
        
        // CONSTRU√á√ÉO DO HTML INTERNO - Monta estrutura visual completa da tarefa
        tarefaElement.innerHTML = `
            <input type="checkbox" id="tarefa${tarefa.id}" class="checkbox-tarefa" ${tarefa.concluida ? 'checked' : ''}>
            <div class="nome-tarefa">${tarefa.titulo}</div>
            <div class="data-tarefa">${tarefa.dataVencimento || tarefa.prazo || 'Sem data'}</div>
            ${tarefa.descricao ? `<div class="descricao-tarefa">${tarefa.descricao}</div>` : ''}
            <button class="btn-excluir" onclick="excluirTarefaProx('${tarefa.id}')">Excluir</button>
        `; // TEMPLATE HTML - Checkbox, t√≠tulo, data, descri√ß√£o opcional e bot√£o de exclus√£o
        
        // POSICIONAMENTO NA INTERFACE - Decide em qual lista inserir a tarefa
        if (tarefa.concluida) { // VERIFICA√á√ÉO DE STATUS - Testa se tarefa est√° conclu√≠da
            listaTarefasConcluidas.appendChild(tarefaElement); // INSER√á√ÉO EM CONCLU√çDAS - Adiciona √† lista de finalizadas
        } else {
            listaTarefasProx.appendChild(tarefaElement); // INSER√á√ÉO EM PENDENTES - Adiciona √† lista de pr√≥ximas tarefas
        }
    }
    
    // FUN√á√ÉO DE CONFIGURA√á√ÉO DE EVENTOS - Adiciona interatividade aos checkboxes das tarefas
    function adicionarEventListeners() {
        // SELE√á√ÉO DE CHECKBOXES - Localiza todos os controles de marca√ß√£o
        const checkboxes = document.querySelectorAll('.checkbox-tarefa'); // BUSCA DE ELEMENTOS - Encontra todos os checkboxes de tarefa
        
        // CONFIGURA√á√ÉO INDIVIDUAL - Adiciona evento a cada checkbox
        checkboxes.forEach(checkbox => { // ITERA√á√ÉO - Processa cada checkbox individualmente
            // EVENTO DE MUDAN√áA - Detecta quando checkbox √© marcado/desmarcado
            checkbox.addEventListener('change', function() { // LISTENER DE CHANGE - Responde a altera√ß√µes no checkbox
                const tarefaElement = this.closest('.tarefa-item'); // LOCALIZA√á√ÉO DO CONTAINER - Encontra elemento pai da tarefa
                const tarefaId = tarefaElement.dataset.id; // EXTRA√á√ÉO DE ID - Obt√©m identificador da tarefa
                
                // DECIS√ÉO DE MOVIMENTO - Determina para onde mover a tarefa baseado no estado
                if (this.checked) { // VERIFICA√á√ÉO DE MARCA√á√ÉO - Testa se checkbox foi marcado
                    moverParaConcluidas(tarefaId, tarefaElement); // MOVIMENTO PARA CONCLU√çDAS - Transfere para lista de finalizadas
                } else {
                    moverParaProx(tarefaId, tarefaElement); // MOVIMENTO PARA PENDENTES - Retorna para lista de pr√≥ximas
                }
            });
        });
    }
    
    // FUN√á√ÉO DE MOVIMENTO PARA CONCLU√çDAS - Transfere tarefa para lista de finalizadas com anima√ß√£o
    function moverParaConcluidas(tarefaId, tarefaElement) {
        // MARCA√á√ÉO VISUAL - Aplica classe CSS para indicar conclus√£o
        tarefaElement.classList.add('tarefa-concluida'); // ADI√á√ÉO DE CLASSE - Marca visualmente como conclu√≠da
        
        // LIMPEZA DE MENSAGENS VAZIAS - Remove mensagem "sem tarefas" da lista de conclu√≠das
        const semTarefasConcluidas = listaTarefasConcluidas.querySelector('.sem-tarefas'); // BUSCA DE MENSAGEM - Localiza mensagem de lista vazia
        if (semTarefasConcluidas) { // VERIFICA√á√ÉO DE EXIST√äNCIA - Testa se mensagem existe
            semTarefasConcluidas.remove(); // REMO√á√ÉO - Elimina mensagem pois lista n√£o estar√° mais vazia
        }
        
        // ANIMA√á√ÉO DE SA√çDA - Aplica efeito visual de transi√ß√£o
        tarefaElement.style.transform = 'translateX(100%)'; // DESLOCAMENTO HORIZONTAL - Move elemento para direita
        tarefaElement.style.opacity = '0.5'; // REDU√á√ÉO DE OPACIDADE - Torna elemento semi-transparente
        
        // MOVIMENTO F√çSICO COM DELAY - Transfere elemento ap√≥s anima√ß√£o
        setTimeout(() => { // TEMPORIZADOR - Aguarda 300ms para completar anima√ß√£o
            listaTarefasConcluidas.appendChild(tarefaElement); // TRANSFER√äNCIA - Move elemento para lista de conclu√≠das
            tarefaElement.style.transform = 'translateX(0)'; // RESTAURA√á√ÉO DE POSI√á√ÉO - Retorna elemento √† posi√ß√£o normal
            tarefaElement.style.opacity = '1'; // RESTAURA√á√ÉO DE OPACIDADE - Torna elemento totalmente vis√≠vel
            verificarSecaoVazia(); // VERIFICA√á√ÉO DE ESTADO - Checa se listas precisam de mensagens vazias
        }, 300); // DURA√á√ÉO DA ANIMA√á√ÉO - 300 milissegundos
        
        // PERSIST√äNCIA DE DADOS - Salva mudan√ßa de status no armazenamento
        atualizarStatusTarefa(tarefaId, true); // ATUALIZA√á√ÉO NO STORAGE - Marca como conclu√≠da no localStorage
    }
    
    // FUN√á√ÉO DE MOVIMENTO PARA PENDENTES - Retorna tarefa para lista de pr√≥ximas com anima√ß√£o
    function moverParaProx(tarefaId, tarefaElement) {
        // REMO√á√ÉO DE MARCA√á√ÉO VISUAL - Remove classe CSS de conclus√£o
        tarefaElement.classList.remove('tarefa-concluida'); // REMO√á√ÉO DE CLASSE - Desmarca visualmente como conclu√≠da
        
        // LIMPEZA DE MENSAGENS VAZIAS - Remove mensagem "sem tarefas" da lista de pendentes
        const semTarefasProx = listaTarefasProx.querySelector('.sem-tarefas'); // BUSCA DE MENSAGEM - Localiza mensagem de lista vazia
        if (semTarefasProx) { // VERIFICA√á√ÉO DE EXIST√äNCIA - Testa se mensagem existe
            semTarefasProx.remove(); // REMO√á√ÉO - Elimina mensagem pois lista n√£o estar√° mais vazia
        }
        
        // ANIMA√á√ÉO DE SA√çDA - Aplica efeito visual de transi√ß√£o reversa
        tarefaElement.style.transform = 'translateX(-100%)'; // DESLOCAMENTO HORIZONTAL - Move elemento para esquerda
        tarefaElement.style.opacity = '0.5'; // REDU√á√ÉO DE OPACIDADE - Torna elemento semi-transparente
        
        // MOVIMENTO F√çSICO COM DELAY - Transfere elemento ap√≥s anima√ß√£o
        setTimeout(() => { // TEMPORIZADOR - Aguarda 300ms para completar anima√ß√£o
            listaTarefasProx.appendChild(tarefaElement); // TRANSFER√äNCIA - Move elemento para lista de pendentes
            tarefaElement.style.transform = 'translateX(0)'; // RESTAURA√á√ÉO DE POSI√á√ÉO - Retorna elemento √† posi√ß√£o normal
            tarefaElement.style.opacity = '1'; // RESTAURA√á√ÉO DE OPACIDADE - Torna elemento totalmente vis√≠vel
            verificarSecaoVazia(); // VERIFICA√á√ÉO DE ESTADO - Checa se listas precisam de mensagens vazias
        }, 300); // DURA√á√ÉO DA ANIMA√á√ÉO - 300 milissegundos
        
        // PERSIST√äNCIA DE DADOS - Salva mudan√ßa de status no armazenamento
        atualizarStatusTarefa(tarefaId, false); // ATUALIZA√á√ÉO NO STORAGE - Marca como pendente no localStorage
    }
    
    // FUN√á√ÉO DE ATUALIZA√á√ÉO DE STATUS - Persiste mudan√ßa de estado da tarefa no armazenamento
    function atualizarStatusTarefa(tarefaId, concluida) {
        // RECUPERA√á√ÉO DE DADOS - Obt√©m lista atual de tarefas do localStorage
        let tarefasProx = JSON.parse(localStorage.getItem('tarefasProx')) || []; // ACESSO AO STORAGE - Busca dados salvos ou inicializa array vazio
        
        // LOCALIZA√á√ÉO DA TAREFA - Encontra posi√ß√£o da tarefa espec√≠fica na lista
        const tarefaIndex = tarefasProx.findIndex(tarefa => tarefa.id === tarefaId); // BUSCA POR ID - Localiza √≠ndice da tarefa
        
        // ATUALIZA√á√ÉO E PERSIST√äNCIA - Modifica status e salva no armazenamento
        if (tarefaIndex !== -1) { // VERIFICA√á√ÉO DE EXIST√äNCIA - Confirma que tarefa foi encontrada
            tarefasProx[tarefaIndex].concluida = concluida; // ALTERA√á√ÉO DE STATUS - Atualiza propriedade concluida
            localStorage.setItem('tarefasProx', JSON.stringify(tarefasProx)); // SALVAMENTO - Persiste lista modificada no storage
        }
    }
    
    // FUN√á√ÉO DE VERIFICA√á√ÉO DE ESTADO - Checa se listas est√£o vazias e exibe mensagens apropriadas
    function verificarSecaoVazia() {
        // VERIFICA√á√ÉO DE LISTA DE PENDENTES - Analisa se h√° tarefas n√£o conclu√≠das
        const tarefasProx = listaTarefasProx.querySelectorAll('.tarefa-item:not(.tarefa-concluida)'); // SELE√á√ÉO DE PENDENTES - Busca tarefas sem classe de conclu√≠da
        
        // TRATAMENTO DE LISTA PENDENTES VAZIA - Exibe mensagem apropriada quando n√£o h√° pendentes
        if (tarefasProx.length === 0 && !listaTarefasProx.querySelector('.sem-tarefas')) { // TESTE DE VAZIO - Verifica aus√™ncia de pendentes e mensagens
            const todasTarefas = document.querySelectorAll('.tarefa-item'); // CONTAGEM TOTAL - Verifica se existem tarefas em geral
            
            // DECIS√ÉO DE MENSAGEM - Escolhe mensagem baseada na exist√™ncia de tarefas
            if (todasTarefas.length > 0) { // EXISTEM TAREFAS - H√° tarefas mas todas est√£o conclu√≠das
                listaTarefasProx.innerHTML = '<div class="sem-tarefas">Todas as tarefas foram conclu√≠das! üéâ</div>'; // MENSAGEM DE SUCESSO - Parabeniza conclus√£o total
            } else { // N√ÉO EXISTEM TAREFAS - N√£o h√° tarefas criadas
                listaTarefasProx.innerHTML = '<div class="sem-tarefas">Nenhuma tarefa para a pr√≥xima semana. Crie uma nova tarefa!</div>'; // MENSAGEM DE CRIA√á√ÉO - Orienta cria√ß√£o de tarefa
            }
        }
        
        // VERIFICA√á√ÉO DE LISTA DE CONCLU√çDAS - Analisa se h√° tarefas finalizadas
        const tarefasConcluidas = listaTarefasConcluidas.querySelectorAll('.tarefa-item.tarefa-concluida'); // SELE√á√ÉO DE CONCLU√çDAS - Busca tarefas com classe de conclu√≠da
        
        // TRATAMENTO DE LISTA CONCLU√çDAS VAZIA - Exibe mensagem quando n√£o h√° conclu√≠das
        if (tarefasConcluidas.length === 0 && !listaTarefasConcluidas.querySelector('.sem-tarefas')) { // TESTE DE VAZIO - Verifica aus√™ncia de conclu√≠das e mensagens
            listaTarefasConcluidas.innerHTML = '<div class="sem-tarefas">Nenhuma tarefa conclu√≠da ainda.</div>'; // MENSAGEM DE ESTADO VAZIO - Informa aus√™ncia de conclus√µes
        }
    }
    
    // FUN√á√ÉO DE CRIA√á√ÉO DE TAREFA - Adiciona nova tarefa √† lista de pr√≥ximas tarefas
    function adicionarNovaTarefa(dadosTarefa) {
        // GERA√á√ÉO DE ID √öNICO - Cria identificador √∫nico usando timestamp
        const novoId = 'tarefaProx' + Date.now(); // ID √öNICO - Prefixo + timestamp para evitar duplicatas
        
        // CONSTRU√á√ÉO DO OBJETO TAREFA - Cria estrutura de dados da nova tarefa
        const novaTarefa = {
            id: novoId, // IDENTIFICADOR - ID √∫nico da tarefa
            titulo: dadosTarefa.titulo, // T√çTULO - Nome principal da tarefa
            descricao: dadosTarefa.descricao || '', // DESCRI√á√ÉO - Detalhes adicionais ou string vazia
            prazo: dadosTarefa.prazo, // PRAZO - Data limite para conclus√£o
            prioridade: dadosTarefa.prioridade, // N√çVEL DE PRIORIDADE - Import√¢ncia da tarefa
            concluida: false, // STATUS INICIAL - Nova tarefa sempre come√ßa como n√£o conclu√≠da
            dataVencimento: dadosTarefa.prazo // DATA DE VENCIMENTO - C√≥pia do prazo para compatibilidade
        };
        
        // RECUPERA√á√ÉO E ATUALIZA√á√ÉO DE DADOS - Adiciona tarefa √† lista existente
        let tarefasProx = JSON.parse(localStorage.getItem('tarefasProx')) || []; // CARREGAMENTO - Obt√©m lista atual ou inicializa vazia
        tarefasProx.push(novaTarefa); // ADI√á√ÉO - Insere nova tarefa na lista
        localStorage.setItem('tarefasProx', JSON.stringify(tarefasProx)); // PERSIST√äNCIA - Salva lista atualizada no storage
        
        // ATUALIZA√á√ÉO DA INTERFACE - Recarrega a visualiza√ß√£o com nova tarefa
        carregarTarefas(); // REFRESH DA UI - Atualiza listas visuais
    }
    
    // Inicializa os eventos dos checkboxes
    adicionarEventListeners();
    
    // ------------------- Controle do modal de nova tarefa -------------------
    const fabButton = document.getElementById('fabNovaTarefaProx'); // Bot√£o flutuante
    const novaTarefaBtn = document.getElementById('novaTarefaBtn'); // Bot√£o dentro da interface
    const modal = document.getElementById('modalNovaTarefaProx'); // Modal de cria√ß√£o de tarefa
    const cancelarBtn = document.getElementById('cancelarBtnProx'); // Bot√£o cancelar no modal
    const form = document.getElementById('formNovaTarefaProx'); // Formul√°rio de nova tarefa
    
    // CONFIGURA√á√ÉO DE EVENT LISTENERS - Define intera√ß√µes do usu√°rio com a interface
    
    // ABERTURA DE MODAL VIA FAB - Bot√£o flutuante para criar nova tarefa
    if (fabButton) { // VERIFICA√á√ÉO DE EXIST√äNCIA - Confirma que elemento FAB existe
        fabButton.addEventListener('click', function() { // EVENTO DE CLIQUE - Detecta clique no bot√£o FAB
            modal.style.display = 'block'; // EXIBI√á√ÉO DO MODAL - Torna modal vis√≠vel
        });
    }
    
    // ABERTURA DE MODAL VIA BOT√ÉO DEDICADO - Bot√£o "Nova Tarefa" alternativo
    if (novaTarefaBtn) { // VERIFICA√á√ÉO DE EXIST√äNCIA - Confirma que bot√£o nova tarefa existe
        novaTarefaBtn.addEventListener('click', function() { // EVENTO DE CLIQUE - Detecta clique no bot√£o nova tarefa
            modal.style.display = 'block'; // EXIBI√á√ÉO DO MODAL - Torna modal vis√≠vel
        });
    }
    
    // CANCELAMENTO DE MODAL - Bot√£o para fechar sem salvar
    if (cancelarBtn) { // VERIFICA√á√ÉO DE EXIST√äNCIA - Confirma que bot√£o cancelar existe
        cancelarBtn.addEventListener('click', function() { // EVENTO DE CANCELAMENTO - Detecta clique em cancelar
            modal.style.display = 'none'; // OCULTA√á√ÉO DO MODAL - Esconde modal
            form.reset(); // LIMPEZA DO FORMUL√ÅRIO - Reseta campos preenchidos
        });
    }
    
    // FECHAMENTO POR CLIQUE EXTERNO - Fecha modal ao clicar fora da √°rea de conte√∫do
    if (modal) { // VERIFICA√á√ÉO DE EXIST√äNCIA - Confirma que modal existe
        modal.addEventListener('click', function(e) { // EVENTO DE CLIQUE NO OVERLAY - Detecta clique na √°rea do modal
            if (e.target === modal) { // VERIFICA√á√ÉO DE ALVO - Confirma que clique foi no overlay, n√£o no conte√∫do
                modal.style.display = 'none'; // OCULTA√á√ÉO DO MODAL - Esconde modal
                form.reset(); // LIMPEZA DO FORMUL√ÅRIO - Reseta campos preenchidos
            }
        });
    }
    
    // SUBMISS√ÉO DE FORMUL√ÅRIO - Processa cria√ß√£o de nova tarefa
    if (form) { // VERIFICA√á√ÉO DE EXIST√äNCIA - Confirma que formul√°rio existe
        form.addEventListener('submit', function(e) { // EVENTO DE SUBMISS√ÉO - Detecta envio do formul√°rio
            e.preventDefault(); // PREVEN√á√ÉO DE RELOAD - Impede recarregamento da p√°gina
            
            // COLETA DE DADOS DO FORMUL√ÅRIO - Extrai informa√ß√µes preenchidas pelo usu√°rio
            const dadosTarefa = {
                titulo: document.getElementById('tituloProx').value, // T√çTULO - Obt√©m valor do campo t√≠tulo
                descricao: document.getElementById('descricaoProx').value, // DESCRI√á√ÉO - Obt√©m valor do campo descri√ß√£o
                prazo: document.getElementById('prazoProx').value, // PRAZO - Obt√©m valor do campo data limite
                prioridade: document.getElementById('prioridadeProx').value // PRIORIDADE - Obt√©m valor do campo prioridade
            };
            
            // PROCESSAMENTO DA TAREFA - Chama fun√ß√£o para criar e salvar tarefa
            adicionarNovaTarefa(dadosTarefa); // CRIA√á√ÉO - Executa adi√ß√£o da nova tarefa
            
            // FINALIZA√á√ÉO DO PROCESSO - Fecha modal e limpa formul√°rio
            modal.style.display = 'none'; // OCULTA√á√ÉO - Esconde modal ap√≥s cria√ß√£o
            form.reset(); // LIMPEZA - Reseta todos os campos do formul√°rio
        });
    }
    
    // CONFIGURA√á√ÉO GLOBAL - Torna fun√ß√£o acess√≠vel globalmente para outros scripts
    window.adicionarTarefaProx = adicionarNovaTarefa; // EXPOSI√á√ÉO GLOBAL - Permite acesso √† fun√ß√£o de outros arquivos JS
    
    // FUN√á√ÉO DE EXCLUS√ÉO DE TAREFAS - Remove tarefa permanentemente do sistema
    function excluirTarefaProx(tarefaId) {
        // CONFIRMA√á√ÉO DO USU√ÅRIO - Solicita confirma√ß√£o antes de excluir
        if (!confirm('Tem certeza que deseja excluir esta tarefa?')) {
            return; // CANCELAMENTO - Para execu√ß√£o se usu√°rio cancelar
        }
        
        // CARREGAMENTO DE DADOS - Recupera todas as tarefas do localStorage
        const tarefas = JSON.parse(localStorage.getItem('tarefas') || '[]');
        
        // FILTRAGEM DE DADOS - Remove a tarefa espec√≠fica da lista
        const tarefasAtualizadas = tarefas.filter(tarefa => tarefa.id !== tarefaId);
        
        // PERSIST√äNCIA - Salva lista atualizada no localStorage
        localStorage.setItem('tarefas', JSON.stringify(tarefasAtualizadas));
        
        // ATUALIZA√á√ÉO DA INTERFACE - Recarrega a lista de tarefas na tela
        carregarTarefas();
    }
    
    // Expondo fun√ß√£o de exclus√£o globalmente
    window.excluirTarefaProx = excluirTarefaProx;
    
    // SINCRONIZA√á√ÉO DE DADOS - Recarrega tarefas quando usu√°rio retorna √† aba
    window.addEventListener('focus', function() { // EVENTO DE FOCO - Detecta quando janela ganha foco
        carregarTarefas(); // ATUALIZA√á√ÉO - Recarrega lista para sincronizar poss√≠veis mudan√ßas
    });
});

// ------------------- INJE√á√ÉO DE ESTILOS CSS -------------------
// CRIA√á√ÉO DIN√ÇMICA DE ANIMA√á√ÉO - Adiciona efeitos visuais via JavaScript
const style = document.createElement('style'); // CRIA√á√ÉO DE ELEMENTO - Cria tag style
style.textContent = `
    @keyframes slideInProx {
        from {
            opacity: 0;
            transform: translateY(-10px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
`; // DEFINI√á√ÉO DE ANIMA√á√ÉO - CSS para efeito de deslizamento vertical
document.head.appendChild(style); // INSER√á√ÉO NO DOM - Adiciona estilos ao cabe√ßalho da p√°gina
