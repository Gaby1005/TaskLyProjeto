/**
 * @fileoverview Gerenciador de Tarefas para a P√°gina "Hoje" - TaskLy
 * 
 * Este arquivo cont√©m toda a l√≥gica para gerenciar tarefas na p√°gina "Hoje" do sistema TaskLy.
 * Inclui funcionalidades para carregar, exibir, criar, mover e persistir tarefas entre
 * as listas de pendentes e conclu√≠das, com anima√ß√µes suaves e sincroniza√ß√£o autom√°tica.
 * 
 * Principais funcionalidades:
 * - Carregamento de tarefas do localStorage
 * - Renderiza√ß√£o din√¢mica de elementos de tarefa
 * - Movimenta√ß√£o entre listas com anima√ß√µes
 * - Persist√™ncia de dados no navegador
 * - Verifica√ß√£o de estados vazios
 * - Sincroniza√ß√£o autom√°tica ao retornar √† aba
 * 
 * @author Gabrielle de Araujo Oliveira, Daniel Augusto Suman De Carvalho 
 * @version 1.0.0
 * @since 2025
 */

/**
 * @fileoverview M√≥dulo de Gerenciamento de Tarefas Di√°rias - TaskLy
 * 
 * Este arquivo cont√©m toda a l√≥gica para gerenciar tarefas do dia atual na aplica√ß√£o TaskLy.
 * Respons√°vel por carregar, exibir, criar e manipular tarefas di√°rias com persist√™ncia no localStorage.
 * 
 * @author Gabrielle de Araujo Oliveira, Daniel Augusto Suman De Carvalho 
 * @version 1.0.0
 * @since 2025
 * 
 * PRINCIPAIS FUNCIONALIDADES:
 * 
 *   CARREGAMENTO E RENDERIZA√á√ÉO:
 * - Carregamento autom√°tico de tarefas do localStorage
 * - Renderiza√ß√£o din√¢mica de elementos HTML para cada tarefa
 * - Separa√ß√£o visual entre tarefas pendentes e conclu√≠das
 * - Exibi√ß√£o de mensagens informativas para listas vazias
 * 
 *   INTERATIVIDADE E EVENTOS:
 * - Event listeners para checkboxes de conclus√£o de tarefas
 * - Movimenta√ß√£o animada entre listas (pendentes ‚Üî conclu√≠das)
 * - Configura√ß√£o de bot√£o flutuante para cria√ß√£o de novas tarefas
 * - Sincroniza√ß√£o autom√°tica quando a janela ganha foco
 * 
 *   PERSIST√äNCIA DE DADOS:
 * - Armazenamento no localStorage do navegador
 * - Atualiza√ß√£o autom√°tica do status de conclus√£o
 * - Manuten√ß√£o de dados entre sess√µes do usu√°rio
 * 
 *   ANIMA√á√ïES E UX:
 * - Transi√ß√µes suaves para movimenta√ß√£o de tarefas
 * - Anima√ß√µes CSS din√¢micas (slideIn)
 * - Feedback visual para a√ß√µes do usu√°rio
 * 
 * @example
 * // O m√≥dulo √© inicializado automaticamente quando o DOM carrega
 * // Fun√ß√µes principais dispon√≠veis globalmente:
 * window.adicionarTarefaHoje('Nova Tarefa', '2024-01-15');
 */

// EVENTO QUE AGUARDA O HTML CARREGAR COMPLETAMENTE - Garante que todos os elementos da p√°gina estejam dispon√≠veis antes de executar o JavaScript
document.addEventListener('DOMContentLoaded', function() {
    // SELE√á√ÉO DE ELEMENTOS DOM - Busca e armazena refer√™ncias aos elementos HTML que ser√£o manipulados pelo JavaScript
    const listaTarefasHoje = document.getElementById('lista-tarefas-hoje'); // ELEMENTO HTML onde ser√£o exibidas as tarefas pendentes do dia atual
    const listaTarefasConcluidas = document.getElementById('lista-tarefas-concluidas'); // ELEMENTO HTML onde ser√£o exibidas as tarefas j√° finalizadas
    
    // CHAMADA INICIAL DA FUN√á√ÉO - Executa imediatamente ao carregar a p√°gina para mostrar tarefas j√° salvas
    carregarTarefas();
    
    function carregarTarefas() {
        const tarefasHoje = JSON.parse(localStorage.getItem('tarefasHoje')) || []; // RECUPERA√á√ÉO DE DADOS - Busca tarefas salvas no navegador ou cria array vazio se n√£o houver dados
        
        // LIMPEZA DA INTERFACE - Remove todo conte√∫do HTML das listas para evitar duplica√ß√£o ao recarregar
        listaTarefasHoje.innerHTML = ''; // LIMPA lista de tarefas pendentes
        listaTarefasConcluidas.innerHTML = ''; // LIMPA lista de tarefas conclu√≠das
        
        if (tarefasHoje.length === 0) {
            // VERIFICA√á√ÉO DE DADOS VAZIOS - Testa se n√£o existem tarefas salvas e exibe mensagens informativas ao usu√°rio
            listaTarefasHoje.innerHTML = '<div class="sem-tarefas">Nenhuma tarefa para hoje. Crie uma nova tarefa!</div>'; // MENSAGEM MOTIVACIONAL para criar primeira tarefa
            listaTarefasConcluidas.innerHTML = '<div class="sem-tarefas">Nenhuma tarefa conclu√≠da ainda.</div>'; // MENSAGEM INFORMATIVA sobre se√ß√£o vazia
        } else {
            // SEPARA√á√ÉO DE DADOS - Filtra e organiza tarefas em duas categorias baseado no status de conclus√£o
            const tarefasPendentes = tarefasHoje.filter(t => !t.concluida); // FILTRO que seleciona apenas tarefas n√£o conclu√≠das
            const tarefasConcluidas = tarefasHoje.filter(t => t.concluida); // FILTRO que seleciona apenas tarefas conclu√≠das
            
            // VERIFICA√á√ÉO DE SE√á√ïES VAZIAS - Testa cada categoria e exibe mensagens apropriadas quando n√£o h√° itens
            if (tarefasPendentes.length === 0) {
                listaTarefasHoje.innerHTML = '<div class="sem-tarefas">Todas as tarefas foram conclu√≠das! üéâ</div>'; // MENSAGEM DE PARAB√âNS quando todas tarefas est√£o finalizadas
            }
            
            // VERIFICA√á√ÉO DE TAREFAS CONCLU√çDAS - Mostra mensagem quando ainda n√£o h√° tarefas finalizadas
            if (tarefasConcluidas.length === 0) {
                listaTarefasConcluidas.innerHTML = '<div class="sem-tarefas">Nenhuma tarefa conclu√≠da ainda.</div>'; // MENSAGEM INFORMATIVA sobre progresso
            }
            
            // RENDERIZA√á√ÉO DE ELEMENTOS - Loop que cria e exibe cada tarefa na interface do usu√°rio
            tarefasHoje.forEach(tarefa => {
                criarElementoTarefa(tarefa); // CHAMADA DE FUN√á√ÉO que converte dados em elementos HTML vis√≠veis
            });
        }
        
        // REATIVA√á√ÉO DE EVENTOS - Reconecta funcionalidades de clique ap√≥s recriar elementos HTML
        adicionarEventListeners(); // FUN√á√ÉO que torna os checkboxes e bot√µes funcionais novamente
    }
    
    function criarElementoTarefa(tarefa) {
        const tarefaElement = document.createElement('div'); // CRIA√á√ÉO DE ELEMENTO - Gera novo container HTML para a tarefa
        tarefaElement.className = `tarefa-item ${tarefa.concluida ? 'tarefa-concluida' : ''}`; // APLICA√á√ÉO DE CLASSES CSS - Define apar√™ncia baseada no status da tarefa
        tarefaElement.dataset.id = tarefa.id; // ARMAZENAMENTO DE IDENTIFICADOR - Guarda ID √∫nico para manipula√ß√£o posterior
        tarefaElement.innerHTML = `
            <input type="checkbox" id="tarefa${tarefa.id}" class="checkbox-tarefa" ${tarefa.concluida ? 'checked' : ''}>
            <div class="nome-tarefa">${tarefa.titulo}</div>
            <div class="data-tarefa">${tarefa.dataVencimento || tarefa.prazo || 'Sem data'}</div>
            ${tarefa.descricao ? `<div class="descricao-tarefa">${tarefa.descricao}</div>` : ''}
            <button class="btn-excluir" onclick="excluirTarefaHoje('${tarefa.id}')">Excluir</button>
        `; // CONSTRU√á√ÉO DE HTML - Cria estrutura interna com checkbox, t√≠tulo, data, descri√ß√£o opcional e bot√£o de exclus√£o
        
        // POSICIONAMENTO CONDICIONAL - Decide onde inserir o elemento baseado no status de conclus√£o
        if (tarefa.concluida) {
            listaTarefasConcluidas.appendChild(tarefaElement); // INSER√á√ÉO na lista de tarefas finalizadas
        } else {
            listaTarefasHoje.appendChild(tarefaElement); // INSER√á√ÉO na lista de tarefas pendentes
        }
    }
    
    function adicionarEventListeners() {
        const checkboxes = document.querySelectorAll('.checkbox-tarefa'); // SELE√á√ÉO DE CHECKBOXES - Busca todos os elementos de marca√ß√£o na p√°gina
        checkboxes.forEach(checkbox => {
            checkbox.addEventListener('change', function() { // EVENTO DE MUDAN√áA - Detecta quando usu√°rio marca/desmarca checkbox
                const tarefaElement = this.closest('.tarefa-item'); // NAVEGA√á√ÉO DOM - Encontra o container pai da tarefa
                const tarefaId = tarefaElement.dataset.id; // EXTRA√á√ÉO DE DADOS - Recupera identificador √∫nico da tarefa
                if (this.checked) {
                    moverParaConcluidas(tarefaId, tarefaElement); // A√á√ÉO DE CONCLUS√ÉO - Executa quando tarefa √© marcada como feita
                } else {
                    moverParaHoje(tarefaId, tarefaElement); // A√á√ÉO DE REVERS√ÉO - Executa quando tarefa √© desmarcada
                }
            });
        });
    }
    
    function moverParaConcluidas(tarefaId, tarefaElement) {
        tarefaElement.classList.add('tarefa-concluida'); // MARCA√á√ÉO VISUAL - Adiciona classe CSS que aplica estilo de tarefa finalizada
        
        // LIMPEZA DE MENSAGENS - Remove avisos de se√ß√£o vazia quando primeira tarefa √© adicionada
        const semTarefasConcluidas = listaTarefasConcluidas.querySelector('.sem-tarefas');
        if (semTarefasConcluidas) semTarefasConcluidas.remove(); // REMO√á√ÉO CONDICIONAL de mensagem informativa
        
        // ANIMA√á√ÉO DE SA√çDA - Aplica efeitos visuais antes de mover elemento
        tarefaElement.style.transform = 'translateX(100%)'; // DESLIZAMENTO para direita
        tarefaElement.style.opacity = '0.5'; // TRANSPAR√äNCIA parcial
        
        setTimeout(() => {
            // MOVIMENTA√á√ÉO F√çSICA - Transfere elemento entre listas ap√≥s anima√ß√£o
            listaTarefasConcluidas.appendChild(tarefaElement); // INSER√á√ÉO na nova lista
            tarefaElement.style.transform = 'translateX(0)'; // RESTAURA√á√ÉO da posi√ß√£o
            tarefaElement.style.opacity = '1'; // RESTAURA√á√ÉO da opacidade
            
            // VERIFICA√á√ÉO DE ESTADO - Testa se listas ficaram vazias ap√≥s movimenta√ß√£o
            verificarSecaoVazia();
        }, 300); // DELAY de 300ms para suavizar transi√ß√£o
        
        // PERSIST√äNCIA DE DADOS - Salva mudan√ßa de status no armazenamento do navegador
        atualizarStatusTarefa(tarefaId, true); // ATUALIZA√á√ÉO com status conclu√≠do
    }
    
    function moverParaHoje(tarefaId, tarefaElement) {
        tarefaElement.classList.remove('tarefa-concluida'); // REMO√á√ÉO VISUAL - Remove classe CSS de tarefa finalizada
        
        // LIMPEZA DE MENSAGENS - Remove avisos de se√ß√£o vazia quando primeira tarefa √© adicionada
        const semTarefasHoje = listaTarefasHoje.querySelector('.sem-tarefas');
        if (semTarefasHoje) semTarefasHoje.remove(); // REMO√á√ÉO CONDICIONAL de mensagem informativa
        
        // ANIMA√á√ÉO DE SA√çDA - Aplica efeitos visuais antes de mover elemento
        tarefaElement.style.transform = 'translateX(-100%)'; // DESLIZAMENTO para esquerda
        tarefaElement.style.opacity = '0.5'; // TRANSPAR√äNCIA parcial
        
        setTimeout(() => {
            // MOVIMENTA√á√ÉO F√çSICA - Transfere elemento entre listas ap√≥s anima√ß√£o
            listaTarefasHoje.appendChild(tarefaElement); // INSER√á√ÉO na lista de pendentes
            tarefaElement.style.transform = 'translateX(0)'; // RESTAURA√á√ÉO da posi√ß√£o
            tarefaElement.style.opacity = '1'; // RESTAURA√á√ÉO da opacidade
            
            // VERIFICA√á√ÉO DE ESTADO - Testa se listas ficaram vazias ap√≥s movimenta√ß√£o
            verificarSecaoVazia();
        }, 300); // DELAY de 300ms para suavizar transi√ß√£o
        
        // PERSIST√äNCIA DE DADOS - Salva mudan√ßa de status no armazenamento do navegador
        atualizarStatusTarefa(tarefaId, false); // ATUALIZA√á√ÉO com status pendente
    }
    
    function atualizarStatusTarefa(tarefaId, concluida) {
        let tarefasHoje = JSON.parse(localStorage.getItem('tarefasHoje')) || []; // RECUPERA√á√ÉO DE DADOS - Busca lista atual de tarefas
        const tarefaIndex = tarefasHoje.findIndex(tarefa => tarefa.id === tarefaId); // LOCALIZA√á√ÉO - Encontra posi√ß√£o da tarefa espec√≠fica no array
        
        if (tarefaIndex !== -1) { // VERIFICA√á√ÉO DE EXIST√äNCIA - Confirma que tarefa foi encontrada
            tarefasHoje[tarefaIndex].concluida = concluida; // ATUALIZA√á√ÉO DE PROPRIEDADE - Modifica status de conclus√£o
            localStorage.setItem('tarefasHoje', JSON.stringify(tarefasHoje)); // SALVAMENTO PERMANENTE - Armazena dados atualizados no navegador
        }
    }
    
    function verificarSecaoVazia() {
        // VERIFICA√á√ÉO DA LISTA DE PENDENTES - Testa se se√ß√£o de tarefas do dia est√° vazia
        const tarefasHoje = listaTarefasHoje.querySelectorAll('.tarefa-item:not(.tarefa-concluida)'); // SELE√á√ÉO de tarefas n√£o conclu√≠das
        if (tarefasHoje.length === 0 && !listaTarefasHoje.querySelector('.sem-tarefas')) { // TESTE DUPLO - verifica vazio e aus√™ncia de mensagem
            const todasTarefas = document.querySelectorAll('.tarefa-item'); // CONTAGEM TOTAL de tarefas existentes
            if (todasTarefas.length > 0) {
                listaTarefasHoje.innerHTML = '<div class="sem-tarefas">Todas as tarefas foram conclu√≠das! üéâ</div>'; // MENSAGEM DE SUCESSO quando todas est√£o finalizadas
            } else {
                listaTarefasHoje.innerHTML = '<div class="sem-tarefas">Nenhuma tarefa para hoje. Crie uma nova tarefa!</div>'; // MENSAGEM MOTIVACIONAL quando n√£o h√° tarefas
            }
        }
        
        // VERIFICA√á√ÉO DA LISTA DE CONCLU√çDAS - Testa se se√ß√£o de tarefas finalizadas est√° vazia
        const tarefasConcluidas = listaTarefasConcluidas.querySelectorAll('.tarefa-item.tarefa-concluida'); // SELE√á√ÉO de tarefas conclu√≠das
        if (tarefasConcluidas.length === 0 && !listaTarefasConcluidas.querySelector('.sem-tarefas')) { // TESTE DUPLO - verifica vazio e aus√™ncia de mensagem
            listaTarefasConcluidas.innerHTML = '<div class="sem-tarefas">Nenhuma tarefa conclu√≠da ainda.</div>'; // MENSAGEM INFORMATIVA sobre progresso
        }
    }
    
    function adicionarNovaTarefa(titulo, dataVencimento) {
        const novoId = 'tarefa' + Date.now(); // Cria ID √∫nico
        const novaTarefaHTML = `
            <div class="tarefa-checkbox">
                <input type="checkbox" id="${novoId}" class="checkbox-tarefa">
                <label for="${novoId}" class="label-tarefa">
                    <span class="nome-tarefa">${titulo}</span>
                    <span class="data-conclusao">${dataVencimento}</span>
                </label>
            </div>
        `;
        
        // Adiciona na lista de hoje
        listaTarefasHoje.insertAdjacentHTML('beforeend', novaTarefaHTML);
        
        // Reaplica eventos
        adicionarEventListeners();
    }
    
    // Inicializa eventos para os checkboxes j√° carregados
    adicionarEventListeners();
    
    // CONFIGURA√á√ÉO DO BOT√ÉO FLUTUANTE - Configura a√ß√£o do bot√£o de adicionar nova tarefa
    const fabButton = document.getElementById('fabNovaTarefa'); // SELE√á√ÉO do bot√£o flutuante (Floating Action Button)
    const modal = document.getElementById('modalNovaTarefa'); // LOCALIZA√á√ÉO do modal de cria√ß√£o
    
    if (fabButton && modal) { // VERIFICA√á√ÉO DE EXIST√äNCIA - Confirma que elementos existem na p√°gina
        fabButton.addEventListener('click', function() { // EVENTO DE CLIQUE - Define a√ß√£o ao clicar no bot√£o
            modal.style.display = 'block'; // EXIBI√á√ÉO VISUAL - Torna modal vis√≠vel na tela
        });
    }
    
    // Expondo a fun√ß√£o globalmente (para usar fora desse script)
    window.adicionarTarefaHoje = adicionarNovaTarefa;
    
    // SINCRONIZA√á√ÉO AUTOM√ÅTICA - Recarrega dados quando usu√°rio retorna √† aba do navegador
    window.addEventListener('focus', function() { // EVENTO DE FOCO - Detecta quando janela volta a ter foco
        carregarTarefas(); // ATUALIZA√á√ÉO DE DADOS - Recarrega tarefas do localStorage para sincronizar mudan√ßas
    });
});

// FUN√á√ÉO DE EXCLUS√ÉO DE TAREFAS - Remove tarefa permanentemente do sistema
function excluirTarefaHoje(tarefaId) {
    // CONFIRMA√á√ÉO DO USU√ÅRIO - Solicita confirma√ß√£o antes de excluir
    if (!confirm('Tem certeza que deseja excluir esta tarefa?')) {
        return; // CANCELAMENTO - Para execu√ß√£o se usu√°rio cancelar
    }
    
    // CARREGAMENTO DE DADOS - Recupera todas as tarefas do localStorage
    const tarefas = JSON.parse(localStorage.getItem('tarefas') || '[]');
    
    // FILTRAGEM DE DADOS - Remove a tarefa espec√≠fica da lista
    const tarefasAtualizadas = tarefas.filter(tarefa => tarefa.id !== tarefaId);
    
    // PERSIST√äNCIA - Salva lista atualizada no localStorage
    localStorage.setItem('tarefas', JSON.stringify(tarefasAtualizadas));
    
    // RECARREGAMENTO DA P√ÅGINA - For√ßa atualiza√ß√£o completa da interface
    location.reload();
}

// Expondo fun√ß√£o de exclus√£o globalmente
window.excluirTarefaHoje = excluirTarefaHoje;

// CRIA√á√ÉO DIN√ÇMICA DE ANIMA√á√ÉO CSS - Adiciona defini√ß√£o de anima√ß√£o slideIn ao documento
const style = document.createElement('style'); // CRIA√á√ÉO de elemento <style> via JavaScript
style.textContent = `
    @keyframes slideIn { // DEFINI√á√ÉO DE ANIMA√á√ÉO - Cria efeito de deslizamento suave
        from { // ESTADO INICIAL da anima√ß√£o
            opacity: 0; // TRANSPAR√äNCIA - Elemento come√ßa invis√≠vel
            transform: translateY(-10px); // POSICIONAMENTO - Elemento come√ßa 10px acima
        }
        to { // ESTADO FINAL da anima√ß√£o
            opacity: 1; // TRANSPAR√äNCIA - Elemento termina completamente vis√≠vel
            transform: translateY(0); // POSICIONAMENTO - Elemento termina na posi√ß√£o normal
        }
    }
`;
document.head.appendChild(style); // INSER√á√ÉO NO DOM - Adiciona estilos CSS ao cabe√ßalho do documento
